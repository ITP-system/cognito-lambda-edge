"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const app_1 = require("../../app");
const globals_1 = require("@jest/globals");
(0, globals_1.describe)('Unit test for app handler', function () {
    (0, globals_1.it)('verifies successful response', async () => {
        const event = {
            httpMethod: 'get',
            body: '',
            headers: {},
            isBase64Encoded: false,
            multiValueHeaders: {},
            multiValueQueryStringParameters: {},
            path: '/hello',
            pathParameters: {},
            queryStringParameters: {},
            requestContext: {
                accountId: '123456789012',
                apiId: '1234',
                authorizer: {},
                httpMethod: 'get',
                identity: {
                    accessKey: '',
                    accountId: '',
                    apiKey: '',
                    apiKeyId: '',
                    caller: '',
                    clientCert: {
                        clientCertPem: '',
                        issuerDN: '',
                        serialNumber: '',
                        subjectDN: '',
                        validity: { notAfter: '', notBefore: '' },
                    },
                    cognitoAuthenticationProvider: '',
                    cognitoAuthenticationType: '',
                    cognitoIdentityId: '',
                    cognitoIdentityPoolId: '',
                    principalOrgId: '',
                    sourceIp: '',
                    user: '',
                    userAgent: '',
                    userArn: '',
                },
                path: '/hello',
                protocol: 'HTTP/1.1',
                requestId: 'c6af9ac6-7b61-11e6-9a41-93e8deadbeef',
                requestTimeEpoch: 1428582896000,
                resourceId: '123456',
                resourcePath: '/hello',
                stage: 'dev',
            },
            resource: '',
            stageVariables: {},
        };
        const result = await (0, app_1.lambdaHandler)(event);
        (0, globals_1.expect)(result.statusCode).toEqual(200);
        (0, globals_1.expect)(result.body).toEqual(JSON.stringify({
            message: 'hello world',
        }));
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC1oYW5kbGVyLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0ZXN0LWhhbmRsZXIudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLG1DQUEwQztBQUMxQywyQ0FBcUQ7QUFFckQsSUFBQSxrQkFBUSxFQUFDLDJCQUEyQixFQUFFO0lBQ2xDLElBQUEsWUFBRSxFQUFDLDhCQUE4QixFQUFFLEtBQUssSUFBSSxFQUFFO1FBQzFDLE1BQU0sS0FBSyxHQUF5QjtZQUNoQyxVQUFVLEVBQUUsS0FBSztZQUNqQixJQUFJLEVBQUUsRUFBRTtZQUNSLE9BQU8sRUFBRSxFQUFFO1lBQ1gsZUFBZSxFQUFFLEtBQUs7WUFDdEIsaUJBQWlCLEVBQUUsRUFBRTtZQUNyQiwrQkFBK0IsRUFBRSxFQUFFO1lBQ25DLElBQUksRUFBRSxRQUFRO1lBQ2QsY0FBYyxFQUFFLEVBQUU7WUFDbEIscUJBQXFCLEVBQUUsRUFBRTtZQUN6QixjQUFjLEVBQUU7Z0JBQ1osU0FBUyxFQUFFLGNBQWM7Z0JBQ3pCLEtBQUssRUFBRSxNQUFNO2dCQUNiLFVBQVUsRUFBRSxFQUFFO2dCQUNkLFVBQVUsRUFBRSxLQUFLO2dCQUNqQixRQUFRLEVBQUU7b0JBQ04sU0FBUyxFQUFFLEVBQUU7b0JBQ2IsU0FBUyxFQUFFLEVBQUU7b0JBQ2IsTUFBTSxFQUFFLEVBQUU7b0JBQ1YsUUFBUSxFQUFFLEVBQUU7b0JBQ1osTUFBTSxFQUFFLEVBQUU7b0JBQ1YsVUFBVSxFQUFFO3dCQUNSLGFBQWEsRUFBRSxFQUFFO3dCQUNqQixRQUFRLEVBQUUsRUFBRTt3QkFDWixZQUFZLEVBQUUsRUFBRTt3QkFDaEIsU0FBUyxFQUFFLEVBQUU7d0JBQ2IsUUFBUSxFQUFFLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFO3FCQUM1QztvQkFDRCw2QkFBNkIsRUFBRSxFQUFFO29CQUNqQyx5QkFBeUIsRUFBRSxFQUFFO29CQUM3QixpQkFBaUIsRUFBRSxFQUFFO29CQUNyQixxQkFBcUIsRUFBRSxFQUFFO29CQUN6QixjQUFjLEVBQUUsRUFBRTtvQkFDbEIsUUFBUSxFQUFFLEVBQUU7b0JBQ1osSUFBSSxFQUFFLEVBQUU7b0JBQ1IsU0FBUyxFQUFFLEVBQUU7b0JBQ2IsT0FBTyxFQUFFLEVBQUU7aUJBQ2Q7Z0JBQ0QsSUFBSSxFQUFFLFFBQVE7Z0JBQ2QsUUFBUSxFQUFFLFVBQVU7Z0JBQ3BCLFNBQVMsRUFBRSxzQ0FBc0M7Z0JBQ2pELGdCQUFnQixFQUFFLGFBQWE7Z0JBQy9CLFVBQVUsRUFBRSxRQUFRO2dCQUNwQixZQUFZLEVBQUUsUUFBUTtnQkFDdEIsS0FBSyxFQUFFLEtBQUs7YUFDZjtZQUNELFFBQVEsRUFBRSxFQUFFO1lBQ1osY0FBYyxFQUFFLEVBQUU7U0FDckIsQ0FBQztRQUNGLE1BQU0sTUFBTSxHQUEwQixNQUFNLElBQUEsbUJBQWEsRUFBQyxLQUFLLENBQUMsQ0FBQztRQUVqRSxJQUFBLGdCQUFNLEVBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN2QyxJQUFBLGdCQUFNLEVBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FDdkIsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUNYLE9BQU8sRUFBRSxhQUFhO1NBQ3pCLENBQUMsQ0FDTCxDQUFDO0lBQ04sQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFQSUdhdGV3YXlQcm94eUV2ZW50LCBBUElHYXRld2F5UHJveHlSZXN1bHQgfSBmcm9tICdhd3MtbGFtYmRhJztcbmltcG9ydCB7IGxhbWJkYUhhbmRsZXIgfSBmcm9tICcuLi8uLi9hcHAnO1xuaW1wb3J0IHsgZXhwZWN0LCBkZXNjcmliZSwgaXQgfSBmcm9tICdAamVzdC9nbG9iYWxzJztcblxuZGVzY3JpYmUoJ1VuaXQgdGVzdCBmb3IgYXBwIGhhbmRsZXInLCBmdW5jdGlvbiAoKSB7XG4gICAgaXQoJ3ZlcmlmaWVzIHN1Y2Nlc3NmdWwgcmVzcG9uc2UnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGV2ZW50OiBBUElHYXRld2F5UHJveHlFdmVudCA9IHtcbiAgICAgICAgICAgIGh0dHBNZXRob2Q6ICdnZXQnLFxuICAgICAgICAgICAgYm9keTogJycsXG4gICAgICAgICAgICBoZWFkZXJzOiB7fSxcbiAgICAgICAgICAgIGlzQmFzZTY0RW5jb2RlZDogZmFsc2UsXG4gICAgICAgICAgICBtdWx0aVZhbHVlSGVhZGVyczoge30sXG4gICAgICAgICAgICBtdWx0aVZhbHVlUXVlcnlTdHJpbmdQYXJhbWV0ZXJzOiB7fSxcbiAgICAgICAgICAgIHBhdGg6ICcvaGVsbG8nLFxuICAgICAgICAgICAgcGF0aFBhcmFtZXRlcnM6IHt9LFxuICAgICAgICAgICAgcXVlcnlTdHJpbmdQYXJhbWV0ZXJzOiB7fSxcbiAgICAgICAgICAgIHJlcXVlc3RDb250ZXh0OiB7XG4gICAgICAgICAgICAgICAgYWNjb3VudElkOiAnMTIzNDU2Nzg5MDEyJyxcbiAgICAgICAgICAgICAgICBhcGlJZDogJzEyMzQnLFxuICAgICAgICAgICAgICAgIGF1dGhvcml6ZXI6IHt9LFxuICAgICAgICAgICAgICAgIGh0dHBNZXRob2Q6ICdnZXQnLFxuICAgICAgICAgICAgICAgIGlkZW50aXR5OiB7XG4gICAgICAgICAgICAgICAgICAgIGFjY2Vzc0tleTogJycsXG4gICAgICAgICAgICAgICAgICAgIGFjY291bnRJZDogJycsXG4gICAgICAgICAgICAgICAgICAgIGFwaUtleTogJycsXG4gICAgICAgICAgICAgICAgICAgIGFwaUtleUlkOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgY2FsbGVyOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgY2xpZW50Q2VydDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50Q2VydFBlbTogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc3N1ZXJETjogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXJpYWxOdW1iZXI6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3ViamVjdEROOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkaXR5OiB7IG5vdEFmdGVyOiAnJywgbm90QmVmb3JlOiAnJyB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBjb2duaXRvQXV0aGVudGljYXRpb25Qcm92aWRlcjogJycsXG4gICAgICAgICAgICAgICAgICAgIGNvZ25pdG9BdXRoZW50aWNhdGlvblR5cGU6ICcnLFxuICAgICAgICAgICAgICAgICAgICBjb2duaXRvSWRlbnRpdHlJZDogJycsXG4gICAgICAgICAgICAgICAgICAgIGNvZ25pdG9JZGVudGl0eVBvb2xJZDogJycsXG4gICAgICAgICAgICAgICAgICAgIHByaW5jaXBhbE9yZ0lkOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlSXA6ICcnLFxuICAgICAgICAgICAgICAgICAgICB1c2VyOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgdXNlckFnZW50OiAnJyxcbiAgICAgICAgICAgICAgICAgICAgdXNlckFybjogJycsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBwYXRoOiAnL2hlbGxvJyxcbiAgICAgICAgICAgICAgICBwcm90b2NvbDogJ0hUVFAvMS4xJyxcbiAgICAgICAgICAgICAgICByZXF1ZXN0SWQ6ICdjNmFmOWFjNi03YjYxLTExZTYtOWE0MS05M2U4ZGVhZGJlZWYnLFxuICAgICAgICAgICAgICAgIHJlcXVlc3RUaW1lRXBvY2g6IDE0Mjg1ODI4OTYwMDAsXG4gICAgICAgICAgICAgICAgcmVzb3VyY2VJZDogJzEyMzQ1NicsXG4gICAgICAgICAgICAgICAgcmVzb3VyY2VQYXRoOiAnL2hlbGxvJyxcbiAgICAgICAgICAgICAgICBzdGFnZTogJ2RldicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVzb3VyY2U6ICcnLFxuICAgICAgICAgICAgc3RhZ2VWYXJpYWJsZXM6IHt9LFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCByZXN1bHQ6IEFQSUdhdGV3YXlQcm94eVJlc3VsdCA9IGF3YWl0IGxhbWJkYUhhbmRsZXIoZXZlbnQpO1xuXG4gICAgICAgIGV4cGVjdChyZXN1bHQuc3RhdHVzQ29kZSkudG9FcXVhbCgyMDApO1xuICAgICAgICBleHBlY3QocmVzdWx0LmJvZHkpLnRvRXF1YWwoXG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ2hlbGxvIHdvcmxkJyxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICApO1xuICAgIH0pO1xufSk7XG4iXX0=