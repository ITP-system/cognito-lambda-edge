AWSTemplateFormatVersion: 2010-09-09
Description: |
  Create an S3 bucket and CloudFront (OAC) for hosting a static website with Cognito authentification

Parameters:
  SystemName:
    Description: System Name
    Type: String
    Default: "lambdaedge-auth"
  LambdaAuthCheckCurrentVersionArn:
    Description: System Name
    Type: String
    Default: arn:aws:lambda:us-east-1:217606627312:function:sample-dev-lambda-authcheck:25
  LambdaAuthSigV4CurrentVersionArn:
    Description: System Name
    Type: String
    Default: arn:aws:lambda:us-east-1:217606627312:function:sample-dev-lambda-authsigv4:30


Resources:
  #-----------------------------------------------------------------------------
  # S3 bucket
  #-----------------------------------------------------------------------------
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${SystemName}-bucket
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-bucket

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource:
              - !Sub arn:aws:s3:::${S3Bucket}/*
            Principal:
              Service: cloudfront.amazonaws.com
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}

  #-----------------------------------------------------------------------------
  # CloudFront
  #-----------------------------------------------------------------------------
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub ${SystemName}-distribution
        Origins:
          - DomainName: !Select [2, !Split ["/", !ImportValue lambdaAppUserUrl]] # Remove https:// from URL. 
            Id: lambdaAppUserOrigin
            CustomOriginConfig:
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
          - DomainName: !GetAtt S3Bucket.RegionalDomainName
            Id: S3Origin
            OriginAccessControlId: !GetAtt OAC.Id
            S3OriginConfig:
              OriginAccessIdentity: ""
          - DomainName: !Select [2, !Split ["/", !ImportValue lambdaAuthUiUrl]] # Remove https:// from URL. 
            Id: lambdaAuthUiOrigin
            CustomOriginConfig:
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
          - DomainName: !Select [2, !Split ["/", !ImportValue lambdaAppAdminUrl]] # Remove https:// from URL. 
            Id: lambdaAppAdminOrigin
            CustomOriginConfig:
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: lambdaAppUserOrigin
          CachePolicyId: '4135ea2d-6df8-44a3-9df3-4b5a84be39ad' # CachingDisabled
          Compress: 'true'
          OriginRequestPolicyId: 'b689b0a8-53d0-40ab-baf2-68738e2966ac' # AllViewerExceptHostHeader
          SmoothStreaming: 'false'
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          LambdaFunctionAssociations:
            - EventType: viewer-request
              LambdaFunctionARN: !Ref LambdaAuthCheckCurrentVersionArn
            - EventType: origin-request
              LambdaFunctionARN: !Ref LambdaAuthSigV4CurrentVersionArn
        CacheBehaviors:
          - PathPattern: contents/*
            TargetOriginId: S3Origin
            Compress: true
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized (Recommended for S3)
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - GET
              - HEAD
            LambdaFunctionAssociations:
              - EventType: viewer-request
                LambdaFunctionARN: !Ref LambdaAuthCheckCurrentVersionArn
          - PathPattern: auth/*
            TargetOriginId: lambdaAuthUiOrigin
            CachePolicyId: '4135ea2d-6df8-44a3-9df3-4b5a84be39ad' # CachingDisabled
            Compress: 'true'
            OriginRequestPolicyId: 'b689b0a8-53d0-40ab-baf2-68738e2966ac' # AllViewerExceptHostHeader
            SmoothStreaming: 'false'
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            LambdaFunctionAssociations:
              - EventType: viewer-request
                LambdaFunctionARN: !Ref LambdaAuthCheckCurrentVersionArn
              - EventType: origin-request
                LambdaFunctionARN: !Ref LambdaAuthSigV4CurrentVersionArn
          - PathPattern: admin/*
            TargetOriginId: lambdaAppAdminOrigin
            CachePolicyId: '4135ea2d-6df8-44a3-9df3-4b5a84be39ad' # CachingDisabled
            Compress: 'true'
            OriginRequestPolicyId: 'b689b0a8-53d0-40ab-baf2-68738e2966ac' # AllViewerExceptHostHeader
            SmoothStreaming: 'false'
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            LambdaFunctionAssociations:
              - EventType: viewer-request
                LambdaFunctionARN: !Ref LambdaAuthCheckCurrentVersionArn
              - EventType: origin-request
                LambdaFunctionARN: !Ref LambdaAuthSigV4CurrentVersionArn
        PriceClass: PriceClass_200

  OAC:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Description: Access Control
        Name: !Sub ${SystemName}-oac
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  #-----------------------------------------------------------------------------
  # Cognito User pool
  #-----------------------------------------------------------------------------
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${SystemName}-user-pool

  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub ${SystemName}
      UserPoolId: !Ref CognitoUserPool

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${SystemName}-client
      UserPoolId: !Ref CognitoUserPool

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      # 認証されていないIDへのアクセスを許可
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
        - ClientId: !Ref CognitoUserPoolClient
          ProviderName: !Sub "cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}"
      # IDプール名
      IdentityPoolName: "IdentityPoolName1"

  # 未認証ユーザ用ポリシー
  UnauthenticatedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: "UnauthenticatedPolicy for Cognito ID Pool."
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunctionUrl
            Resource:
              - "*"

  # 未認証ユーザ用ロール
  UnauthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "UnauthenticatedRole for Cognito ID Pool."
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRoleWithWebIdentity"
            Principal:
              Federated: cognito-identity.amazonaws.com
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud":
                  Ref: IdentityPool
              ForAnyValue:StringLike:
                "cognito-identity.amazonaws.com:amr": unauthenticated
      ManagedPolicyArns:
        - Ref: UnauthenticatedPolicy

  # 認証済ユーザ用ポリシー
  AuthenticatedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: "AuthenticatedPolicy for Cognito ID Pool."
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunctionUrl
              - cognito-idp:ListUsers
              - cognito-idp:ListGroups
              - cognito-idp:AdminGetUser
              - cognito-idp:AdminCreateUser
              - cognito-idp:AdminUpdateUserAttributes
              - cognito-idp:AdminDeleteUser
              - cognito-idp:AdminEnableUser
              - cognito-idp:AdminDisableUser
              - cognito-idp:AdminListGroupsForUser
              - cognito-idp:AdminAddUserToGroup
              - cognito-idp:AdminRemoveUserFromGroup
              - ses:SendRawEmail
              - ses:SendEmail
            Resource:
              - "*"

  # 認証済ユーザ用ロール
  AuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "AuthenticatedRole for Cognito ID Pool."
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRoleWithWebIdentity"
            Principal:
              Federated: cognito-identity.amazonaws.com
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud":
                  Ref: IdentityPool
              ForAnyValue:StringLike:
                "cognito-identity.amazonaws.com:amr": authenticated
      ManagedPolicyArns:
        - Ref: AuthenticatedPolicy

  # CognitoIDプールに認証・未認証ユーザ用ロールをアタッチ
  RoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId:
        Ref: IdentityPool
      Roles:
        authenticated: !GetAtt AuthenticatedRole.Arn
        unauthenticated: !GetAtt UnauthenticatedRole.Arn
      RoleMappings:
        "default":
          AmbiguousRoleResolution: Deny
          IdentityProvider: !Sub cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}:${CognitoUserPoolClient}
          Type: Token

  AdminsPoolGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Admins
      Precedence: 0
      RoleArn: !GetAtt AdminRole.Arn
      UserPoolId: !Ref CognitoUserPool

  UsersPoolGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Users
      Precedence: 5
      RoleArn: !GetAtt UserRole.Arn
      UserPoolId: !Ref CognitoUserPool

  AdminRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRoleWithWebIdentity"
            Principal:
              Federated: cognito-identity.amazonaws.com
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud":
                  Ref: IdentityPool
              ForAnyValue:StringLike:
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: !Sub "${SystemName}-policy-userpoolgroup-admin"
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "cognito-idp:AdminConfirmSignUp"
                  - "cognito-idp:AdminDeleteUser"
                  - "cognito-idp:AdminSetUserPassword"
                  - "cognito-idp:AdminUpdateUserAttributes"
                  - "cognito-idp:AdminAddUserToGroup"
                  - "cognito-idp:AdminRemoveUserFromGroup"
                  - "cognito-idp:DeleteUser"
                  - "cognito-idp:ListUsers"
                  - "cognito-idp:UpdateUserAttributes"
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource:
                  - "*"
      ManagedPolicyArns:
        - Ref: AuthenticatedPolicy
      RoleName: !Sub "${SystemName}-role-userpoolgroup-admin"

  UserRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRoleWithWebIdentity"
            Principal:
              Federated: cognito-identity.amazonaws.com
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud":
                  Ref: IdentityPool
              ForAnyValue:StringLike:
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: !Sub "${SystemName}-policy-userpoolgroup-user"
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "cognito-idp:AdminInitiateAuth"
                  - "cognito-idp:AdminUpdateUserAttributes"
                  - "cognito-idp:ChangePassword"
                  - "cognito-idp:DeleteUser"
                  - "cognito-idp:UpdateUserAttributes"
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource:
                  - "*"
      ManagedPolicyArns:
        - Ref: AuthenticatedPolicy
      RoleName: !Sub "${SystemName}-role-userpoolgroup-user"

Outputs:
  CloudFrontDomainName:
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub ${SystemName}-domain-name
  UserPool:
    Value: !Ref CognitoUserPool
    Export:
      Name: !Sub ${SystemName}-user-pool
  UserPoolClient:
    Value: !Ref CognitoUserPoolClient
    Export:
      Name: !Sub ${SystemName}-user-pool-client
  UserPoolDomain:
    Value: !Ref CognitoUserPoolDomain
    Export:
      Name: !Sub ${SystemName}-user-pool-domain
